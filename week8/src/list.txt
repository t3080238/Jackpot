https://www.fooish.com/javascript/es6/class.html

ES6:
1.Let & Const, Block-Scoped
    必須先定義後使用
    不可重複定義

2.Arrow Functions，箭頭函數，且不自帶this，所以this為上一層的父親

    // 如果有多行函數內容，跟一般函數一樣，用大括號 {} 包住
    (param1, param2, …, paramN) => { statements }

    // 可以用 return 返回值
    (param1, param2, …, paramN) => { return expression; }

    // 如果只有一行 expression 語句，可以省略大括號 {}
    // 同時 expression 的值，會被當作是函數返回值
    (param1, param2, …, paramN) => expression

    // 如果只有一個參數，可以省略參數小括號 ()
    (singleParam) => { statements }
    singleParam => { statements }

    // 如果沒有參數，必須留著空的小括號 ()，不能省略
    () => { statements }
    () => expression

3.Default Parameters預設值
    function test(a, b){
        var a = a || 'AAA';
    }

4.Multi-line Strings
    可換行字串‵ ‵取代' '及" "

5.Object Literals 物件名稱簡化


6.Template Literals
    // es5
    // var name = ‘Your name is ‘ + first + ‘ ‘ + last + ‘.’
    var name = `Your name is ${first} ${last}.`

7.Spread Operator 展開運算子
    function foo(a, b, c, d, e) {
        console.log(a, b, c, d, e);
    }

    var arr = [3, 4];

    // 輸出 1 2 3 4 5
    // 等同於執行 foo(1, 2, 3, 4, 5)
    foo(1, 2, ...arr, 5);

8.Rest Operator 其餘運算子
    function fun1(...myArgs) {
    console.log(myArgs);
    }

    // 顯示 []
    fun1();

    // 顯示 [1]
    fun1(1);

    // 顯示 [5, 6, 7]
    fun1(5, 6, 7);

Array Destructuring 陣列的解構賦值

    
9.動態屬性名稱
    var prefix = 'es6';

    var obj = {
        // 計算屬性
        [prefix + ' is']: 'cool',
        
        // 計算方法
        [prefix + ' score']() {
            console.log(100);
        }
    };
    
    // 顯示 cool
    console.log(obj['es6 is']);

    // 顯示 100
    obj['es6 score']();

10.Octal Literal 八進位表示法
    var oValue = 0o10;

    // 8
    console.log(oValue);
Binary Literal 二進位表示法
    var bValue = 0b10;

    // 2
    console.log(bValue);

11.Array Destructuring 陣列的解構賦值
    var foo = ['one', 'two', 'three'];

    // 從 array 中提取值，然後按照對應的位置，指定給相應的變數
    var [one, two, three] = foo;


    var [a, ...b] = [1, 2, 3];

    // 1
    console.log(a);

    // [2, 3]
    console.log(b);

12.Object Destructuring 物件的解構賦值
    var o = {p: 42, q: true};

    // 從物件 o 中取出 key 為 p 和 q 的值，指定給變數 p 和 q
    var {q, p} = o;

    // 42
    console.log(p);

    // true
    console.log(q);

你的變數名稱可以和被取值的 object key 使用不同的名稱：
    var {p: foo, q: bar} = o;

    // 42
    console.log(foo);

    // true
    console.log(bar);

還可以用在函數的參數列上：
    function drawES2015Chart({size = 'big', cords = {x: 0, y: 0}, radius = 25}) {
        console.log(size, cords, radius);
    }

    // 輸出 big {x: 18, y: 30} 30
    drawES2015Chart({
        cords: {x: 18, y: 30},
        radius: 30
    });

13.樣板標籤 Tagged Template Literals
    function myTag(strings, personExp, ageExp) {

        // 首先依 ${} 的位置將原始字串切成一個字串陣列，得到 strings
        // ["that ", " is a ", ""]
        //
        // 為什麼最後有一個 ""
        // 因為我們有一個 ${} 的位置在字串結尾
        
        // ${ person } 的值會被當作第二個參數傳入
        // ${ age } 的值會被當作第三個參數傳入

        // "that "
        var str0 = strings[0];
        // " is a "
        var str1 = strings[1];

        var ageStr;

        if (ageExp > 99) {
            ageStr = 'centenarian';
        } else {
            ageStr = 'youngster';
        }

        // ${ person } 的值會被當作第二個參數傳入
        return str0 + personExp + str1 + ageStr;
    }

    var output = myTag`that ${ person } is a ${ age }`;

    // 顯示 that Mike is a youngster
    console.log(output);

14.for ... of
    跟 forEach 不同的是 for...of可以搭配 break, continue, return 語句

    // for (variable of iterable){}

    // let arr = [];

    // for(let i = 0 ; i < 100 ; i++){   
    //     arr[i] = {};
    //     arr[i].txt = `abc${i}`;
    //     arr[i].int = i;
    // }

    // for(eacharr of arr){
    //     if (eacharr.int%2 == 0) continue;    
    //     console.log(eacharr.txt);
    // }

15. class, extends, super
    super();：為呼叫父類別的constructor
    super.屬性：引用父類別的屬性
    透過 super 調用父類別的方法時，super 會綁定子類別的 this，而不是父類別的 this

16.Promise 